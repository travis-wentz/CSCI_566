[General]
#comments are done with a hashtag
network = TwoTiered

cmdenv-express-mode = true

tkenv-plugin-path = ../../../inet/etc/plugins
# tkenv-default-run = 1

# Controller
**.controller.events = ""
**.controller.eventsSection = ""

# Common client/server parameters
**.serverA.numTcpApps = 2
**.serverOrigin.numTcpApps = 1
**.clients*.numTcpApps = 1
**.tcpApp[0].httpProtocol = 11

# Servers (acting as servers)
**.server*.tcpApp[0].typename="HttpServer"
**.serverOrigin.tcpApp[0].hostName="serverOrigin.example.org"
**.serverA.tcpApp[0].hostName="serverA.example.org"
**.server*.tcpApp[0].port=80
**.server*.tcpApp[0].logFile=""
**.server*.tcpApp[0].siteDefinition=""
**.server*.tcpApp[0].config=xmldoc("../server_cfg.xml","//server-profile[@id='normal']")
**.server*.tcpApp[0].activationTime=0.0
**.server*.hopCount.result-recording-modes = +histogram

# ServerA client (to simulate forwarding some of the client's requests to origin)
**.serverA.tcpApp[1].typename="HttpBrowser"
**.serverA.tcpApp[1].hostName="" # Not applicable
**.serverA.tcpApp[1].port=-1
**.serverA.tcpApp[1].logFile=""
**.serverA.tcpApp[1].scriptFile=""  # Free running
**.serverA.tcpApp[1].config=xmldoc("../browser_cfg.xml","//user-profile[@id='light']") #simulates sending about 2/3 of client requests to origin
**.serverA.tcpApp[1].activationTime=0.0
**.serverA.hopCount.result-recording-modes = +histogram

# Clients
**.clients*[*].tcpApp[0].typename="HttpBrowser"
**.clients*[*].tcpApp[0].hostName="" # Not applicable
**.clients*[*].tcpApp[0].port=-1
**.clients*[*].tcpApp[0].logFile=""
**.clients*[*].tcpApp[0].scriptFile=""  # Free running
**.clients*[*].tcpApp[0].config=xmldoc("../browser_cfg.xml","//user-profile[@id='normal']")
**.clients*[*].tcpApp[0].activationTime=0.0
**.clients*[*].hopCount.result-recording-modes = +histogram

# IoT
**.iot*.numUdpApps = 1
**.iot*[*].udpApp[0].typename="UDPBasicApp"
**.iot*[*].udpApp[0].destAddresses = "serverA"
**.iot*[*].udpApp[0].destPort=5000
**.iot*[*].udpApp[0].messageLength=1000B
**.iot*[*].udpApp[0].sendInterval = uniform(30min, 120min) #random updates between 30min and 120min
**.iot*[*].udpApp[0].packetName="UDPData"

# ServerA UDP receive (for receiving udp from iot devices)
**.serverA.numUdpApps = 2
**.serverA.udpApp[0].typename="UDPSink"
**.serverA.udpApp[0].hostName="serverA"
**.serverA.udpApp[0].localPort=5000

# ServerA UDP send (for sending updates to origin server)
**.serverA.udpApp[1].typename="UDPBasicApp"
**.serverA.udpApp[1].destAddress="serverOrigin"
**.serverA.udpApp[1].destPort=5000
**.serverA.udpApp[1].messageLength=1000B
**.serverA.udpApp[1].sendInterval=exponential(1min) #sends update randomly (to avoid traffic spikes) about every minute
**.serverA.udpApp[1].packetName="UDPData"

# ServerOrigin UDP
**.serverOrigin.numUdpApps = 1
**.serverOrigin.udpApp[0].typename="UDPSink"
**.serverOrigin.udpApp[0].hostName="serverOrigin"
**.serverOrigin.udpApp[0].localPort=5000

#
# TCP stuff starts here
#

# tcp settings
**.tcp.mss = 1024
**.tcp.advertisedWindow = 14336  # 14*mss
**.tcp.tcpAlgorithmClass = "TCPReno"
**.tcp.recordStats = true

# ip settings
**.ip.procDelay = 10000us
**.forwarding = false

# ARP configuration
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s
**.networkLayer.proxyARP = true  # Host's is hardwired "false"

# NIC configuration
**.ppp[*].queueType = "DropTailQueue" # in routers
**.ppp[*].queue.frameCapacity = 10  # in routers

# hook names
**.qosBehaviorClass = "EnqueueWithoutQoS"

# nam trace
**.nam.logfile = "trace.nam"
**.nam.prolog = ""
**.namid = -1  # auto

[Config uniform]
**.controller.config = xmldoc("project_2_controller_cfg.xml","//controller-profile[@id='uniform']")

[Config histogram]
**.controller.config = xmldoc("project_2_controller_cfg.xml","//controller-profile[@id='histogram']")

